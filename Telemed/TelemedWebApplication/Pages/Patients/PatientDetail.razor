@page "/patientdetail/{patientId}"
@inject PatientService patientService
@using TelemedWebApplication.Data
@using Utils.Models

<h1> Patient Details </h1>

@if (patient == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm class="form-group" Model="@patient" OnValidSubmit="@HandleSubmit">
        <DataAnnotationsValidator />
        <Blazorise.ValidationSummary />

        <div class="form-group">
            <label for="FirstName">First Name</label>
            <InputText id="FirstName" class="form-control" placeholder="Enter First Name" @bind-Value="patient.FirstName" />
        </div>

        <div class="form-group">
            <label for="LastName">Last Name</label>
            <InputText id="LastName" class="form-control" placeholder="Enter Last Name" @bind-Value="patient.LastName" />
        </div>

        <div class="form-group">
            <label for="sex">Sex</label>
            <InputSelect id="sex" class="form-control" @bind-Value="patient.Sex">
                <option value="">Select classification ...</option>
                <option value="Male">Male</option>
                <option value="Female">Female</option>
                <option value="Other">Other</option>
            </InputSelect>
        </div>

        <div class="form-group">
            <label for="age">Age</label>
            <InputNumber id="age" class="form-control" @bind-Value="patient.Age" />
        </div>

        <div class="form-group">
            <label for="email">Email</label>
            <InputText id="email" class="form-control" placeholder="Enter email" @bind-Value="patient.Email" />
        </div>

        <button type="submit" class="btn btn-primary">Submit</button>
    </EditForm>


    @if (patient.VitalSigns != null && patient.VitalSigns.Count > 0)
    {
        <h2>Vital Signs</h2>
        <h3>Temperature</h3>
        <p>
            Min: @patient.VitalSigns.OrderBy(vs => vs.Temperature).Take(1).FirstOrDefault().Temperature
        </p>
        <p>
            Max: @patient.VitalSigns.OrderByDescending(vs => vs.Temperature).Take(1).FirstOrDefault().Temperature
        </p>
        <p>
            Average: @GetAverageTemperature()
        </p>

        <h3>Cardiac Frequency</h3>
        <p>
            Min: @patient.VitalSigns.OrderBy(vs => vs.CardiacFrequency).Take(1).FirstOrDefault().CardiacFrequency
        </p>
        <p>
            Max: @patient.VitalSigns.OrderByDescending(vs => vs.CardiacFrequency).Take(1).FirstOrDefault().CardiacFrequency
        </p>
        <p>
            Average: @GetAverageCardiacFrequency()
        </p>

        <h3>SpO2</h3>
        <p>
            Min: @patient.VitalSigns.OrderBy(vs => vs.SpO2).Take(1).FirstOrDefault().SpO2
        </p>
        <p>
            Max: @patient.VitalSigns.OrderByDescending(vs => vs.SpO2).Take(1).FirstOrDefault().SpO2
        </p>
        <p>
            Average: @GetAverageSpO2()
        </p>
        <LineChart @ref="lineChart" TItem="double" />
    }
}

@code {
    [Parameter]
    public string patientId { get; set; }
    private Patient patient { get; set; }
    private LineChart<double> lineChart { get; set; }
    private List<string> backgroundColors = new List<string> { ChartColor.FromRgba(255, 99, 132, 0.2f), ChartColor.FromRgba(54, 162, 235, 0.2f), ChartColor.FromRgba(255, 206, 86, 0.2f), ChartColor.FromRgba(75, 192, 192, 0.2f), ChartColor.FromRgba(153, 102, 255, 0.2f), ChartColor.FromRgba(255, 159, 64, 0.2f) };
    private List<string> borderColors = new List<string> { ChartColor.FromRgba(255, 99, 132, 1f), ChartColor.FromRgba(54, 162, 235, 1f), ChartColor.FromRgba(255, 206, 86, 1f), ChartColor.FromRgba(75, 192, 192, 1f), ChartColor.FromRgba(153, 102, 255, 1f), ChartColor.FromRgba(255, 159, 64, 1f) };

    protected override async Task OnInitializedAsync()
    {
        lineChart = new LineChart<double>();
        //There is most likely a way to just pass the patient as an object instead of calling the API here
        patient = await patientService.GetPatient(patientId);
    }

    private void HandleSubmit()
    {
        patientService.UpdatePatient(patient);
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await HandleRedraw();
        }
    }

    private double GetAverageTemperature()
    {
        List<double> temperatures = patient.VitalSigns.Select(vs => vs.Temperature).ToList();
        return temperatures.Sum() / temperatures.Count;
    }

    private double GetAverageCardiacFrequency()
    {
        List<int> cardiacFrequencies = patient.VitalSigns.Select(vs => vs.CardiacFrequency).ToList();
        return cardiacFrequencies.Sum() / cardiacFrequencies.Count;
    }

    private double GetAverageSpO2()
    {
        List<double> spO2s = patient.VitalSigns.Select(vs => vs.SpO2).ToList();
        return spO2s.Sum() / spO2s.Count;
    }

    async Task HandleRedraw()
    {
        await lineChart.Clear();

        await lineChart.AddDataSet(GetCardiacFrequencyLineChartDataset());
        await lineChart.AddDataSet(GetSPO2LineChartDataset());
        await lineChart.AddLabelsDatasetsAndUpdate(GetTimeLabelsForDay(), GetTemperatureLineChartDataset());
    }

    LineChartDataset<double> GetTemperatureLineChartDataset()
    {
        return new LineChartDataset<double>
        {
            Label = "Temperature",
            Data = GetTemperatures(),
            BackgroundColor = backgroundColors[3],
            BorderColor = borderColors[3],
            Fill = true,
            PointRadius = 2,
            BorderDash = new List<int> { }
        };
    }

    LineChartDataset<double> GetCardiacFrequencyLineChartDataset()
    {
        return new LineChartDataset<double>
        {
            Label = "Cardiac Frequency",
            Data = GetCardiacFrequencies(),
            BackgroundColor = backgroundColors[2],
            BorderColor = borderColors[2],
            Fill = true,
            PointRadius = 2,
            BorderDash = new List<int> { }
        };
    }

    LineChartDataset<double> GetSPO2LineChartDataset()
    {
        return new LineChartDataset<double>
        {
            Label = "SpO2",
            Data = GetSpO2s(),
            BackgroundColor = backgroundColors[1],
            BorderColor = borderColors[1],
            Fill = true,
            PointRadius = 2,
            BorderDash = new List<int> { }
        };
    }

    private List<double> GetTemperatures()
    {
        return patient.VitalSigns.Select(vs => vs.Temperature).ToList();
    }

    private List<double> GetCardiacFrequencies()
    {
        return patient.VitalSigns.Select(vs => (double)vs.CardiacFrequency).ToList();
    }

    private List<double> GetSpO2s()
    {
        return patient.VitalSigns.Select(vs => vs.SpO2).ToList();
    }

    private List<string> GetTimeLabelsForDay()
    {
        return patient.VitalSigns.Select(vs => vs.CreationTime.ToShortTimeString()).ToList();
    }
}
